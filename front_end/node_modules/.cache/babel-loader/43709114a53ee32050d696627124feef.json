{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _raf = require('raf');\n\nvar _raf2 = _interopRequireDefault(_raf);\n\nvar _Selectors = require('../utils/Selectors');\n\nvar _Selectors2 = _interopRequireDefault(_Selectors);\n\nvar _HyperResponsive = require('../utils/HyperResponsive');\n\nvar _HyperResponsive2 = _interopRequireDefault(_HyperResponsive);\n\nvar _Utils = require('../utils/Utils');\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _Debug = require('../utils/Debug');\n\nvar Debug = _interopRequireWildcard(_Debug);\n\nvar _Context = require('../utils/Context');\n\nvar _Rectangle = require('../primitives/Rectangle');\n\nvar _Rectangle2 = _interopRequireDefault(_Rectangle);\n\nvar _Voronoi = require('../components/Voronoi');\n\nvar _Voronoi2 = _interopRequireDefault(_Voronoi);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} //\n\n\nvar debug = process.env.NODE_ENV === 'development';\n\nvar Chart = function (_React$Component) {\n  _inherits(Chart, _React$Component);\n\n  function Chart(_ref) {\n    var interaction = _ref.interaction,\n        hoverMode = _ref.hoverMode,\n        groupMode = _ref.groupMode,\n        showVoronoi = _ref.showVoronoi,\n        dark = _ref.dark;\n\n    _classCallCheck(this, Chart);\n\n    var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this));\n\n    _this.updateDataModel = function (props) {\n      var data = props.data,\n          width = props.width,\n          height = props.height;\n      var getSeries = props.getSeries,\n          getDatums = props.getDatums,\n          getLabel = props.getLabel,\n          getSeriesID = props.getSeriesID,\n          getPrimary = props.getPrimary,\n          getSecondary = props.getSecondary,\n          getR = props.getR,\n          getPrimaryAxisID = props.getPrimaryAxisID,\n          getSecondaryAxisID = props.getSecondaryAxisID; // Normalize getters\n\n      getSeries = _Utils2.default.normalizePathGetter(getSeries);\n      getDatums = _Utils2.default.normalizePathGetter(getDatums);\n      getLabel = _Utils2.default.normalizePathGetter(getLabel);\n      getSeriesID = _Utils2.default.normalizePathGetter(getSeriesID);\n      getPrimary = _Utils2.default.normalizePathGetter(getPrimary);\n      getSecondary = _Utils2.default.normalizePathGetter(getSecondary);\n      getR = _Utils2.default.normalizePathGetter(getR);\n      getPrimaryAxisID = _Utils2.default.normalizePathGetter(getPrimaryAxisID);\n      getSecondaryAxisID = _Utils2.default.normalizePathGetter(getSecondaryAxisID); // Check for data\n\n      if (!data) {\n        if (debug) Debug.noData(_this);\n        return;\n      } // getSeries\n\n\n      var series = getSeries(data); // Check for data\n\n      if (!series) {\n        if (debug) Debug.noData(_this);\n        return;\n      } // First access the data, and provide it to the context\n\n\n      var preMaterializedData = series.map(function (s, seriesIndex) {\n        var seriesID = getSeriesID(s, seriesIndex, data);\n        var seriesLabel = getLabel(s, seriesIndex, data);\n        var primaryAxisID = getPrimaryAxisID(s, seriesIndex, data);\n        var secondaryAxisID = getSecondaryAxisID(s, seriesIndex, data);\n        var series = {\n          original: s,\n          index: seriesIndex,\n          id: seriesID,\n          label: seriesLabel,\n          primaryAxisID: primaryAxisID,\n          secondaryAxisID: secondaryAxisID,\n          datums: getDatums(s, seriesIndex, data).map(function (d, index) {\n            return {\n              originalSeries: s,\n              seriesIndex: seriesIndex,\n              seriesID: seriesID,\n              seriesLabel: seriesLabel,\n              index: index,\n              original: d,\n              primary: getPrimary(d, index, s, seriesIndex, data),\n              secondary: getSecondary(d, index, s, seriesIndex, data),\n              r: getR(d, index, s, seriesIndex, data)\n            };\n          })\n        };\n        return series;\n      }); // Provide the preMaterializedData to the chart instance\n\n      _this.state.chartState.dispatch(function (state) {\n        return _extends({}, state, {\n          preMaterializedData: preMaterializedData,\n          width: width,\n          height: height\n        });\n      });\n    };\n\n    _this.measure = function (prevProps, prevState) {\n      if (!_this.el) {\n        return;\n      }\n\n      _this.dims = _this.el.getBoundingClientRect();\n\n      var _this$getSelectedStat = _this.getSelectedState(_this.state.chartState),\n          offset = _this$getSelectedStat.offset;\n\n      var _this$getSelectedStat2 = _this.getSelectedState(prevState.chartState),\n          prevOffset = _this$getSelectedStat2.offset;\n\n      if (prevProps && (offset.left !== prevOffset.left || offset.top !== prevOffset.top)) {\n        _this.state.chartState.dispatch(function (state) {\n          return _extends({}, state, {\n            offset: {\n              left: _this.el.offsetLeft,\n              top: _this.el.offsetTop\n            }\n          });\n        });\n      }\n    };\n\n    _this.onMouseMove = _Utils2.default.throttle(function (e) {\n      var clientX = e.clientX,\n          clientY = e.clientY;\n\n      var _this$getSelectedStat3 = _this.getSelectedState(_this.state.chartState),\n          gridX = _this$getSelectedStat3.gridX,\n          gridY = _this$getSelectedStat3.gridY;\n\n      _this.state.pointerState.dispatch(function (state) {\n        var x = clientX - _this.dims.left - gridX;\n        var y = clientY - _this.dims.top - gridY;\n\n        var pointer = _extends({}, state.pointer, {\n          active: true,\n          x: x,\n          y: y,\n          dragging: state.pointer && state.pointer.down\n        });\n\n        return _extends({}, state, {\n          pointer: pointer\n        });\n      });\n    });\n\n    _this.onMouseLeave = function () {\n      _this.state.chartState.dispatch(function (state) {\n        return _extends({}, state, {\n          hovered: _extends({}, state.hovered, {\n            active: false\n          })\n        });\n      });\n\n      _this.state.pointerState.dispatch(function (state) {\n        return _extends({}, state, {\n          pointer: _extends({}, state.pointer, {\n            active: false\n          })\n        });\n      });\n    };\n\n    _this.onMouseDown = function () {\n      document.addEventListener('mouseup', _this.onMouseUp);\n      document.addEventListener('mousemove', _this.onMouseMove);\n\n      _this.state.pointerState.dispatch(function (state) {\n        return _extends({}, state, {\n          pointer: _extends({}, state.pointer, {\n            sourceX: state.pointer.x,\n            sourceY: state.pointer.y,\n            down: true\n          })\n        });\n      });\n    };\n\n    _this.onMouseUp = function () {\n      document.removeEventListener('mouseup', _this.onMouseUp);\n      document.removeEventListener('mousemove', _this.onMouseMove);\n\n      _this.state.pointerState.dispatch(function (state) {\n        return _extends({}, state, {\n          pointer: _extends({}, state.pointer, {\n            down: false,\n            dragging: false,\n            released: {\n              x: state.pointer.x,\n              y: state.pointer.y\n            }\n          })\n        });\n      });\n    };\n\n    _this.state = {\n      chartState: {\n        hovered: {\n          active: false,\n          series: null,\n          datums: []\n        },\n        cursors: {},\n        axes: {},\n        tooltip: {},\n        axisDimensions: {},\n        interaction: interaction,\n        hoverMode: hoverMode,\n        groupMode: groupMode,\n        showVoronoi: showVoronoi,\n        dark: dark,\n        dispatch: function dispatch(fn) {\n          return _this.setState(function (state) {\n            return {\n              chartState: fn(state.chartState)\n            };\n          });\n        }\n      },\n      pointerState: {\n        pointer: {},\n        dispatch: function dispatch(fn) {\n          return _this.setState(function (state) {\n            return {\n              pointerState: fn(state.pointerState)\n            };\n          });\n        }\n      }\n    };\n    _this.selectors = {\n      gridX: _Selectors2.default.gridX(),\n      gridY: _Selectors2.default.gridY(),\n      offset: _Selectors2.default.offset()\n    };\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var changes = [];\n      ['interaction', 'hoverMode', 'groupMode', 'showVoronoi'].forEach(function (prop) {\n        if (prevProps[prop] !== _this2.props[prop]) {\n          changes.push(prop);\n        }\n      });\n\n      if (changes.length) {\n        var changeObj = {};\n        changes.forEach(function (prop) {\n          changeObj[prop] = _this2.props[prop];\n        });\n        this.state.chartState.dispatch(function (state) {\n          return _extends({}, state, changeObj);\n        });\n      }\n\n      if (_Utils2.default.shallowCompare(prevProps, this.props, ['data', 'width', 'height'])) {\n        this.updateDataModel(this.props);\n      } else {\n        (0, _raf2.default)(function () {\n          return _this2.measure(prevProps, prevState);\n        });\n      }\n    }\n  }, {\n    key: 'getSelectedState',\n    value: function getSelectedState(state) {\n      return {\n        gridX: this.selectors.gridX(state),\n        gridY: this.selectors.gridY(state),\n        offset: this.selectors.offset(state)\n      };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height,\n          handleRef = _props.handleRef,\n          children = _props.children,\n          className = _props.className;\n\n      var _getSelectedState = this.getSelectedState(this.state.chartState),\n          gridX = _getSelectedState.gridX,\n          gridY = _getSelectedState.gridY;\n\n      var allChildren = _react2.default.Children.toArray(children);\n\n      var svgChildren = allChildren.filter(function (d) {\n        return !d.type.isHtml;\n      });\n      var htmlChildren = allChildren.filter(function (d) {\n        return d.type.isHtml;\n      });\n      return _react2.default.createElement(_Context.ChartProvider, {\n        value: this.state.chartState\n      }, _react2.default.createElement(_Context.PointerProvider, {\n        value: this.state.pointerState\n      }, _react2.default.createElement('div', {\n        ref: handleRef,\n        className: 'ReactChart ' + (className || ''),\n        style: {\n          width: width,\n          height: height,\n          position: 'relative'\n        }\n      }, _react2.default.createElement('svg', {\n        ref: function ref(el) {\n          _this3.el = el;\n        },\n        style: {\n          width: width,\n          height: height,\n          overflow: 'visible'\n        }\n      }, _react2.default.createElement('g', {\n        onMouseEnter: function onMouseEnter(e) {\n          e.persist();\n\n          _this3.onMouseMove(e);\n        },\n        onMouseMove: function onMouseMove(e) {\n          e.persist();\n\n          _this3.onMouseMove(e);\n        },\n        onMouseLeave: this.onMouseLeave,\n        onMouseDown: this.onMouseDown,\n        style: {\n          transform: 'translate3d(' + (gridX || 0) + 'px, ' + (gridY || 0) + 'px, 0)'\n        }\n      }, _react2.default.createElement(_Rectangle2.default // This is to ensure the pointer always has something to hit\n      , {\n        x1: -gridX,\n        x2: width - gridX,\n        y1: -gridY,\n        y2: height - gridY,\n        style: {\n          opacity: 0\n        }\n      }), _react2.default.createElement(_Voronoi2.default, null), svgChildren)), htmlChildren)));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      var data = props.data,\n          width = props.width,\n          height = props.height;\n\n      if (_Utils2.default.shallowCompare(props, state, ['data', 'width', 'height'])) {\n        return {\n          chartState: _extends({}, state.chartState, {\n            data: data,\n            width: width,\n            height: height\n          })\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Chart;\n}(_react2.default.Component);\n\nChart.defaultProps = {\n  getSeries: function getSeries(d) {\n    return d;\n  },\n  getDatums: function getDatums(d) {\n    return _Utils2.default.isArray(d) ? d : d.datums || d.data;\n  },\n  getLabel: function getLabel(d, i) {\n    return d.label || 'Series ' + (i + 1);\n  },\n  getSeriesID: function getSeriesID(d, i) {\n    return i;\n  },\n  getPrimary: function getPrimary(d) {\n    return _Utils2.default.isArray(d) ? d[0] : d.primary || d.x;\n  },\n  getSecondary: function getSecondary(d) {\n    return _Utils2.default.isArray(d) ? d[1] : d.secondary || d.y;\n  },\n  getR: function getR(d) {\n    return _Utils2.default.isArray(d) ? d[2] : d.radius || d.r;\n  },\n  getPrimaryAxisID: function getPrimaryAxisID(s) {\n    return s.primaryAxisID;\n  },\n  getSecondaryAxisID: function getSecondaryAxisID(s) {\n    return s.secondaryAxisID;\n  },\n  onHover: function onHover() {},\n  interaction: null,\n  hoverMode: 'primary',\n  groupMode: 'primary',\n  showVoronoi: false\n};\n\nexports.default = function (props) {\n  return _react2.default.createElement(_HyperResponsive2.default, {\n    render: function render(_ref2) {\n      var handleRef = _ref2.handleRef,\n          width = _ref2.width,\n          height = _ref2.height;\n      return _react2.default.createElement(Chart, _extends({}, props, {\n        width: width,\n        height: height,\n        handleRef: handleRef\n      }));\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}